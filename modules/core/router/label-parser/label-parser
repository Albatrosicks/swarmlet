#!/usr/bin/env python

# --- THIS IS PSEUDO CODE ---
# TODO: convert to Go, etc

# ----- parse: swarmlet labels ------
# - swarmlet.port=9000
# - swarmlet.domains=mysite.com,www.mysite.com
# ----- optional labels -----
# - swarmlet.enabled=true  # default to true if swarmlet deploy label is detected
# - swarmlet.protocols=http,https
# - swarmlet.middlewares=redirect@file,auth@file
# ??? - swarmlet.middlewares=redirect-https,basic-auth

# ----- output: traefik labels ------
# - traefik.enable=true
# - traefik.http.services.portainer.loadbalancer.server.port=9000
# - traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN}`)
# - traefik.http.routers.portainer.entrypoints=http,https
# - traefik.http.routers.portainer.middlewares=redirect@file

import sys
import re
import yaml


class Labels:
    def __init__(self, name):
        self.service_name = name
        self.new_labels = {}
        self.labels = {
            'default': 'traefik.enable=true',
            'domains': lambda domains: 'traefik.http.routers.%s.rule=%s' % (
                self.service_name,
                '|'.join(['Host(`%s`)' % x for x in domains.split(',')]),
            ),
            'port': lambda port: 'traefik.http.services.%s.loadbalancer.server.port=%s' % (
                self.service_name,
                port,
            ),
            'entrypoints': lambda entrypoints: 'traefik.http.routers.%s.entrypoints=%s' % (
                self.service_name,
                entrypoints or 'http,https',
            ),
            'middlewares': lambda middlewares: 'traefik.http.routers.%s.middlewares=%s' % (
                self.service_name,
                middlewares,
            ) if middlewares else None,
        }

    def set_label(self, label, value):
        self.new_labels[label] = self.labels[label](value)

    def get_labels(self):
        return {**self.new_labels, 'default': self.labels.get('default')}


def parse_labels(compose_file):
    """Parse Swarmlet deployment labels and return new Docker Compose file"""
    with open(compose_file) as f:
        data = yaml.load(f, Loader=yaml.FullLoader)
        services = {}

        if 'services' not in data:
            raise ReferenceError

        for service_name in data.get('services').keys():
            service = data.get('services').get(service_name)
            # print('name: %s\nservice: %s' % (service_name, service))

            if service.get('deploy') is None:
                continue
            if service.get('deploy').get('labels') is None:
                continue

            deploy_labels = service.get('deploy').get('labels')
            # print('name: %s\nlabels: %s' % (service_name, deploy_labels))

            # skip if traefik labels are used
            if 'traefik.' in '\t'.join(deploy_labels) or 'swarmlet.' not in '\t'.join(deploy_labels):
                continue

            def get_label_value(key):
                return re.sub(
                    r'.*=',
                    '',
                    ''.join(filter(lambda label: key in label, deploy_labels)))

            label_domains = get_label_value('.domains=')
            label_port = get_label_value('.port=')
            label_entrypoints = get_label_value('.entrypoints=')
            label_middlewares = get_label_value('.middlewares=')

            new_deploy_labels = Labels(service_name)

            if label_domains:
                new_deploy_labels.set_label('domains', label_domains)
            if label_port:
                new_deploy_labels.set_label('port', label_port)
                new_deploy_labels.set_label('entrypoints', label_entrypoints)
            if label_middlewares:
                new_deploy_labels.set_label('middlewares', label_middlewares)

            # print(yaml.dump(new_deploy_labels.get_labels()))

            service['deploy']['labels'] = list(
                new_deploy_labels.get_labels().values())

            services[service_name] = service

        for service_name in services.keys():
            data['services'][service_name] = services[service_name]

        print(yaml.dump(data))

        # with open('docker-compose.swarmlet.yml', 'w') as f:
        #     data = yaml.dump(data, f)

    # return yml with updated labels


if __name__ == "__main__":
    input = sys.argv[1]
    output = parse_labels(input)
    print(output)
