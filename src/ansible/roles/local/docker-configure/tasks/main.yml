---
# echo "$PREFIX Creating secrets"
# SWARMLET_BASIC_AUTH=$(htpasswd -nbB "${SWARMLET_USERNAME/ /}" "$SWARMLET_PASSWORD")
# echo -n "$SWARMLET_BASIC_AUTH" | docker secret create security.htpasswd -
# cat <<-EOM | docker secret create swarmlet-user-secrets -
#SWARMLET_USERNAME="${SWARMLET_USERNAME/ /}"
#SWARMLET_PASSWORD="$SWARMLET_PASSWORD"
#SWARMLET_REGISTRY_USERNAME="${SWARMLET_USERNAME/ /}"
#SWARMLET_REGISTRY_PASSWORD="$SWARMLET_PASSWORD"
# EOM

# echo "$PREFIX Creating configs"
# docker config create swarmlet-core-config "$SWARMLET_CONSTANTS"
# cat <<-EOM | docker config create swarmlet-user-config -
#SSH_AUTHORIZED_KEYS="$SSH_AUTHORIZED_KEYS"
#NEW_HOSTNAME="${NEW_HOSTNAME/ /}"
#ROOT_DOMAIN="$ROOT_DOMAIN"
#CA_SERVER="$CA_SERVER"
#INSTALL_MODULES=$INSTALL_MODULES
#CREATE_SWAP="$CREATE_SWAP"
#INSTALL_ZSH="$INSTALL_ZSH"
#LEADER_IP="$(hostname -I | awk '{print $1}')"
# EOM
# ------------------------------------------------------------------

# echo "$PREFIX Creating networks"
# if [[ ! "$(docker network ls | grep "$SWARMLET_NETWORK")" ]]; then
#   docker network create --attachable --driver overlay "$SWARMLET_NETWORK"
# else
#   echo "$PREFIX $SWARMLET_NETWORK network already exists"
# fi

# if [[ ! "$(docker network ls | grep "$TRAEFIK_NETWORK")" ]]; then
#   docker network create --attachable --driver overlay "$TRAEFIK_NETWORK"
# else
#   echo "$PREFIX $TRAEFIK_NETWORK network already exists"
# fi

# - name: remove conflicting ubuntu pacakges
#   apt:
#     pkg:
#       - docker
#     state: absent

# - name: install needed pip modules
#   pip:
#     name:
#       - docker

# - name: add the offial Docker repo GPG key
#   apt_key:
#     url: https://download.docker.com/linux/ubuntu/gpg
#     state: present

# - name: add the offial Docker repo
#   apt_repository:
#     repo: 'deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable'
#     state: present
#     filename: docker.io
#     update_cache: yes

# - name: Install the offical docker packages
#   apt:
#     pkg:
#       - docker-ce
#       - docker-ce-cli

# - name: Start docker on boot
#   systemd:
#     name: docker
#     state: started
#     enabled: yes

# - name: 'Create {{ docker_group }} system group'
#   group:
#     name: '{{ docker_group }}'
#     state: present

# - name: 'Add remote user {{ remote_user }} to group {{ docker_group }}'
#   user:
#     name: '{{ remote_user }}'
#     group: '{{ docker_group }}'
#     append: yes

# - name: Install docker-compose
#   command: pip3 install docker-compose

# - name: Ensure that the docker service is enabled and started at boot time
#   service:
#     name: docker
#     enabled: yes
#     state: restarted

# - name: Check if swarm is already created
#   docker_swarm_info:
#     nodes: yes
#   register: swarm_info
#   run_once: true
#   ignore_errors: yes

# - name: Bootstrap docker swarm
#   docker_swarm:
#     state: present
#     advertise_addr: '{{ ansible_default_ipv4.address }}'
#     debug: yes
#   register: swarm_info
#   run_once: true
# delegate_to: '{{ groups.docker[0] }}'
# when: swarm_info.docker_swarm_active == false or swarm_info.docker_swarm_active is not defined
# - name: gather tokens from bootstrapped swarm
#   docker_swarm_info:
#     nodes: yes
#   register: swarm_info
#   run_once: true
#   delegate_to: '{{ groups.docker[0] }}'

# - name: Add swarm masters to bootstrapped cluster
#   docker_swarm:
#     state: join
#     debug: yes
#     remote_addrs: "{{ hostvars[groups.docker[0]]['ansible_default_ipv4']['address'] }}"
#     join_token: '{{ swarm_info.swarm_facts.JoinTokens.Manager }}'
#     advertise_addr: '{{ ansible_default_ipv4.address }}'
#   when: swarm_master is defined and swarm_master | bool == True

# - name: Add other swarm workers to bootstrapped cluster
#   docker_swarm:
#     state: join
#     remote_addrs: "{{ hostvars[groups.docker[0]]['ansible_default_ipv4']['address'] }}"
#     join_token: '{{ swarm_info.swarm_facts.JoinTokens.Worker }}'
#     advertise_addr: '{{ ansible_default_ipv4.address }}'
#   when: swarm_master is not defined
