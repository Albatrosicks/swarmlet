#!/usr/bin/env bash

set -eo pipefail; [[ $DEBUG ]] && set -x

config() {
  declare cmd="config"
  [[ "$1" == "$cmd" ]] && shift 1

  config-"$@"
}

config-ls() {
  declare cmd="rm"
  [[ "$1" == "$cmd" ]] && shift 1

  docker config ls
}

config-create() {
  declare cmd="create"
  [[ "$1" == "$cmd" ]] && shift 1

  CONFIG_NAME="$1"
  CONFIG="$2"

  if [[ -f "$CONFIG" ]]; then
    cat "$CONFIG" | docker config create --template-driver golang $CONFIG_NAME -
  elif
    echo "$CONFIG" | docker config create --template-driver golang $CONFIG_NAME -
  fi
}

config-rm() {
  declare cmd="rm"
  [[ "$1" == "$cmd" ]] && shift 1

  # TODO: list and update all services using this config
  docker service update --config-rm $CONFIG_NAME $SERVICE
  docker config rm $CONFIG_NAME
}

config-update() {
  declare cmd="update"
  [[ "$1" == "$cmd" ]] && shift 1

  CONFIG_NAME="$1"
  CONFIG="$2"

  # TODO: list and update all services using this config
  docker service update --config-rm $CONFIG_NAME $SERVICE
  docker config rm $CONFIG_NAME

  if [[ -f "$CONFIG" ]]; then
    cat "$CONFIG" | docker config create --template-driver golang $CONFIG_NAME -
  elif
    echo "$CONFIG" | docker config create --template-driver golang $CONFIG_NAME -
  fi

  docker service update --config-add source=$CONFIG_NAME,target=$CONFIG_NAME $SERVICE
}

"$@"
