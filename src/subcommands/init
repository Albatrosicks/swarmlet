#!/usr/bin/env bash

set -eo pipefail; [[ $DEBUG ]] && set -x

init() {
  declare cmd="init"
  [[ "$1" == "$cmd" ]] && shift 1

  init-"$@"
}

init-interactive() {
  echo "$PREFIX Starting interactive installation"

  swarmlet dialog welcome
  swarmlet dialog set-username
  # swarmlet dialog set-password
  swarmlet dialog domain-config
  # swarmlet dialog installation-mode
  swarmlet dialog install-modules
  swarmlet dialog add-swap
  swarmlet dialog install-zsh
  swarmlet dialog are-you-sure

  echo "$FPREFIX Environment"
  printenv

  update-package-cache
  notify-package-updates-available
  install-dependencies $SWARMLET_DEPENDENCIES
  set-hostname $NEW_HOSTNAME

  $INSTALL_DOCKER && install-docker
  $CREATE_SWAP && create-swap
  $INSTALL_ZSH && install-zsh

  # do-select-cf-email # NOTE: What is this for?

  echo "$PREFIX Wizard complete"
  for OPTION in ${!DEFAULT_OPTS[@]}; do
    echo "$OPTION=$(printenv $OPTION)"
  done

  uninstall-swarmlet
}

init-noninteractive() {
  echo "$PREFIX Starting noninteractive installation"
  echo "$PREFIX Setting up the git user"
  adduser $USERNAME --disabled-password --gecos --quiet
  usermod -aG docker $USERNAME
  mkdir -p $REPO_ROOT $USER_ROOT/.ssh
  setfacl -m u:$USERNAME:rwx $REPO_ROOT

  echo "$PREFIX Configuring git SSH options"
  cat "$AUTHORIZED_KEYS" | ts "$SSH_OPTIONS" > $USER_ROOT/.ssh/authorized_keys
  chmod 700 $USER_ROOT/.ssh
  chmod 600 $USER_ROOT/.ssh/authorized_keys
  chown -R $USERNAME:$USERNAME $USER_ROOT/.ssh

  if [[ $CREATE_SWAP == "true" ]]; then
    echo "$PREFIX Creating 1GB of swap space"
    create-swap 1G /swapfile
  fi

  echo "$PREFIX Checking Docker status"
  if check-docker;
    then echo "Docker is running"; docker --version
    else echo "Docker is not running, exiting"; exit 1
  fi

  NODE_IP=$(hostname -I | awk '{print $1}')
  ADVERTISE_ADDR="$NODE_IP:2377"
  echo "ROOT_DOMAIN=$ROOT_DOMAIN" >> $SWARMLET_CONFIG

  echo "$PREFIX Node IP address: $NODE_IP"
  echo "$PREFIX Initializing node as swarm manager"
  if [[ check-swarm ]]; then docker swarm init --advertise-addr $ADVERTISE_ADDR 2>&1 | head -n 1 && true; fi

  if [[ ! "$(docker network ls | grep traefik-public)" ]]; then
    echo "$PREFIX Creating traefik-public network ..."
    docker network create \
      --driver=overlay \
      --attachable \
      traefik-public
  else
    echo "$PREFIX traefik-public network exists."
  fi
  if [[ ! "$(docker network ls | grep $SWARMLET_NETWORK_NAME)" ]]; then
    echo "$PREFIX Creating traefik-public network ..."
    docker network create \
      --attachable \
      --driver $SWARMLET_NETWORK_DRIVER \
      $SWARMLET_NETWORK_NAME
  else
    echo "$PREFIX $SWARMLET_NETWORK_NAME network exists."
  fi

  echo "$PREFIX Creating volumes"
  docker volume create \
    --driver "local" \
    -o o=bind \
    -o type=none \
    -o device=$USER_ROOT \
    git-data

  echo "$PREFIX Installing services"
  SWARMLET_MODULES=(
    core/registry
    core/deployer
    core/loadbalancer
  )

  for MODULE in ${SWARMLET_MODULES[@]}; do
    echo "$PREFIX Installing $MODULE"
    if [[ $MODULE == "core/registry" ]]; then
      swarmlet stack start "core/registry" $SWARMLET_MODULES_ROOT
      swarmlet stack build "core/deployer" $SWARMLET_MODULES_ROOT
    fi
    swarmlet repo create $(basename $MODULE) >/dev/null
    git-local-push $SWARMLET_MODULES_ROOT/$MODULE >/dev/null
  done
}

"$@"
