#!/usr/bin/env bash

set -eo pipefail; [[ $DEBUG ]] && set -x

init() {
  declare cmd="init"
  [[ "$1" == "$cmd" ]] && shift 1

  echo "$PREFIX Setting up the git user"
  adduser $USERNAME --disabled-password --gecos --quiet
  usermod -aG docker $USERNAME
  mkdir -p $REPO_ROOT $USER_ROOT/.ssh
  setfacl -m u:$USERNAME:rwx $REPO_ROOT

  echo "$PREFIX Configuring git SSH options"
  cat "$AUTHORIZED_KEYS" | ts "$SSH_OPTIONS" > $USER_ROOT/.ssh/authorized_keys
  chmod 700 $USER_ROOT/.ssh
  chmod 600 $USER_ROOT/.ssh/authorized_keys
  chown -R $USERNAME:$USERNAME $USER_ROOT/.ssh

  if [[ $CREATE_SWAP == "true" ]]; then
    echo "$PREFIX Creating 1GB of swap space"
    create-swap 1G /swapfile
  fi

  echo "$PREFIX Checking Docker status"
  if check-docker;
    then echo "Docker is running"; docker --version
    else echo "Docker is not running, exiting"; exit 1
  fi

  NODE_IP=$(hostname -I | awk '{print $1}')
  ADVERTISE_ADDR="$NODE_IP:2377"
  echo "ROOT_DOMAIN=$ROOT_DOMAIN" >> $SWARMLET_CONFIG

  echo "$PREFIX Node IP address: $NODE_IP"
  echo "$PREFIX Initializing node as swarm manager"
  docker swarm init --advertise-addr $ADVERTISE_ADDR 2>&1 | head -n 1 && true

  echo "$PREFIX Creating networks"
  docker network create \
    --attachable \
    --driver $SWARMLET_NETWORK_DRIVER \
    $SWARMLET_NETWORK_NAME

  docker network create \
    --attachable \
    --driver=overlay \
    traefik-public

  echo "$PREFIX Creating volumes"
  docker volume create \
    --driver "local" \
    -o o=bind \
    -o type=none \
    -o device=$USER_ROOT \
    git-data

  # TODO:
  # case $INSTALLATION_MODE in
  #   full) SWARMLET_MODULES=(${SWARMLET_CORE_MODULES[@]} ${SWARMLET_RECOMMENDS_MODULES[@]}) ;;
  #   minimal) SWARMLET_MODULES=(${SWARMLET_CORE_MODULES[@]}) ;;
  #   *) echo -e "$PREFIX Unknown installation mode $INSTALLATION_MODE\nExiting"; exit 1 ;;
  # esac

  echo "$PREFIX Installing services"
  SWARMLET_MODULES=(
    core/registry 
    core/deployer
    core/loadbalancer
    recommends/matomo
    recommends/swarmpit
    # TODO: make configurable
  )

  for MODULE in ${SWARMLET_MODULES[@]}; do
    echo "$PREFIX Installing $MODULE"
    if [[ $MODULE == "core/registry" ]]; then
      swarmlet stack start $MODULE $SWARMLET_MODULES_ROOT
      continue
    elif [[ $MODULE == "core/deployer" ]]; then
      # swarmlet stack build $MODULE $SWARMLET_MODULES_ROOT
      echo "TODO: push to local registry"
    fi
    swarmlet repo create $(basename $MODULE) >/dev/null
    git-local-push $SWARMLET_MODULES_ROOT/$MODULE >/dev/null
  done
}

"$@"
