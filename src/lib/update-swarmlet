# #!/usr/bin/env bash

# set -eo pipefail; [[ $DEBUG ]] && set -x; set -o allexport
# SWARMLET_CONSTANTS="/mnt/gfs/swarmlet/src/constants"
# [[ ! -f "$SWARMLET_CONSTANTS" ]] && SWARMLET_CONSTANTS="/mnt/gfs/swarmlet/src/variables"
# source $SWARMLET_CONSTANTS
# [[ ! -f "$SWARMLET_FUNCTIONS" ]] && SWARMLET_FUNCTIONS="/mnt/gfs/swarmlet/src/functions"
# source $SWARMLET_FUNCTIONS
# set +o allexport

# # WIP
# # TODO: test
# update() {
#   declare cmd="update"
#   [[ "$1" == "$cmd" ]] && shift 1
#   [[ "$1" == "rollback" ]] && rollback "$@" && return

#   BRANCH=${1:-master}

#   pushd $SWARMLET_ROOT >/dev/null

#   TIMESTAMP=$(date "+%Y-%m-%d-%H-%M-%S")
#   CURRENT_BRANCH=$(git rev-parse --symbolic-full-name --abbrev-ref HEAD)
#   git-set-config
#   git commit -a -m "Autocommit at $TIMESTAMP"
#   git branch "$CURRENT_BRANCH-rollback-$TIMESTAMP"

#   git fetch origin
#   git reset --hard origin/$BRANCH
#   git clean -fdx

#   set -o allexport
#   source "$SWARMLET_ROOT/src/constants"
#   set +o allexport

#   swarmlet dialog welcome
#   swarmlet dialog auth-info

#   docker secret inspect swarmlet-user-secrets &>/dev/null
#   if [[ $? -ne 0 ]]; then
#     SWARMLET_USERNAME=$(swarmlet dialog set-username)
#     SWARMLET_PASSWORD=$(swarmlet dialog set-password)

#     echo "$PREFIX Creating secrets"
#     SWARMLET_BASIC_AUTH=$(htpasswd -nbB $SWARMLET_USERNAME $SWARMLET_PASSWORD)
#     echo -n "$SWARMLET_BASIC_AUTH" | docker secret create security.htpasswd -
#     cat << EOM | docker secret create swarmlet-user-secrets -
# SWARMLET_USERNAME="$SWARMLET_USERNAME"
# SWARMLET_PASSWORD="$SWARMLET_PASSWORD"
# SWARMLET_REGISTRY_USERNAME="$SWARMLET_USERNAME"
# SWARMLET_REGISTRY_PASSWORD="$SWARMLET_PASSWORD"
# EOM
#   fi

#   docker config inspect swarmlet-user-config &>/dev/null
#   if [[ $? -ne 0 ]]; then
#     SSH_AUTHORIZED_KEYS=$(swarmlet dialog set-ssh-authorized-keys)
#     NEW_HOSTNAME=$(swarmlet dialog set-hostname)
#     ROOT_DOMAIN=$(swarmlet dialog domain-config)
#     INSTALL_MODULES=$(swarmlet dialog install-modules)
#     CREATE_SWAP=$(swarmlet dialog add-swap)
#     INSTALL_ZSH=$(swarmlet dialog install-zsh)
#     INSTALL_CONFIRMED=$(swarmlet dialog confirm-install)

#     echo "$PREFIX Creating configs"
#     docker config create swarmlet-core-config $SWARMLET_CONSTANTS
#     cat << EOM | docker config create swarmlet-user-config -
# SSH_AUTHORIZED_KEYS="$SSH_AUTHORIZED_KEYS"
# NEW_HOSTNAME="${NEW_HOSTNAME/ /}"
# ROOT_DOMAIN="$ROOT_DOMAIN"
# INSTALL_MODULES=($INSTALL_MODULES)
# CREATE_SWAP="$CREATE_SWAP"
# INSTALL_ZSH="$INSTALL_ZSH"
# EOM
#   fi

#   # TODO: if registry is changed
#   COMPOSE_FILE=$SWARMLET_MODULES_ROOT/core/registry/docker-compose.yml
#   docker stack deploy --compose-file $COMPOSE_FILE registry
#   while ! is-service-healthy registry; do sleep 1; done

#   # TODO: build deployer if no deployer found
#   while ! is-service-healthy deployer; do sleep 1; done
#   swarmlet deploy $SWARMLET_MODULES_ROOT/core/deployer

#   for DIR in $SWARMLET_MODULES_ROOT/*; do
#     for MODULE in $DIR/*; do
#       MODULE_NAME=$(basename $MODULE)
#       rm -rf /var/repo/$MODULE_NAME.git &>/dev/null
#       rm -rf /mnt/gfs/git/data/$MODULE_NAME &>/dev/null
#       swarmlet repo create $MODULE_NAME &>/dev/null
#       git-local-push $MODULE >/dev/null
#     done
#   done

#   for REPO in $GIT_DATA_ROOT/*; do
#     pushd $GIT_DATA_ROOT >/dev/null
#     COMPOSE_FILE=$REPO/docker-compose.yml
#     [[ -f $COMPOSE_FILE ]] && swarmlet stack deploy --compose-file $COMPOSE_FILE $REPO
#     popd >/dev/null
#   done

#   popd >/dev/null
# }

# rollback() {
#   declare cmd="rollback"
#   [[ "$1" == "$cmd" ]] && shift 1

#   ROLLBACK_BRANCH=$(swarmlet dialog set-rollback-branch)

#   pushd $SWARMLET_ROOT >/dev/null

#   git checkout -f $ROLLBACK_BRANCH

#   for DIR in $SWARMLET_MODULES_ROOT/*; do
#     for MODULE in $DIR/*; do
#       MODULE_NAME=$(basename $MODULE)
#       rm -rf /var/repo/$MODULE_NAME.git &>/dev/null
#       rm -rf /mnt/gfs/git/data/$MODULE_NAME &>/dev/null
#       swarmlet repo create $MODULE_NAME &>/dev/null
#       git-local-push $MODULE >/dev/null
#     done
#   done

#   for REPO in $GIT_DATA_ROOT/*; do
#     pushd $GIT_DATA_ROOT >/dev/null
#     COMPOSE_FILE=$REPO/docker-compose.yml
#     [[ -f $COMPOSE_FILE ]] && swarmlet stack deploy --compose-file $COMPOSE_FILE $REPO
#     popd >/dev/null
#   done

#   popd >/dev/null
# }

# "$@"
