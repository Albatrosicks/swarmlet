#!/usr/bin/env bash

set -eo pipefail
[[ $DEBUG ]] && set -x

secret() {
  declare cmd="secret"
  [[ "$1" == "$cmd" ]] && shift 1

  secret-"$@"
}

secret-ls() {
  declare cmd="ls"
  [[ "$1" == "$cmd" ]] && shift 1

  docker secret ls
}

secret-create() {
  declare cmd="create"
  [[ "$1" == "$cmd" ]] && shift 1

  SECRET_NAME="$1"
  SECRET="$2"

  if [[ -f "$SECRET" ]]; then
    docker secret create --template-driver golang "$SECRET_NAME" - <"$SECRET"
  else
    echo "$SECRET" | docker secret create --template-driver golang "$SECRET_NAME" -
  fi
}

secret-rm() {
  declare cmd="rm"
  [[ "$1" == "$cmd" ]] && shift 1

  SECRET_NAME="$1"

  # TODO: list all services using this secret, warn about destructive action
  docker service update --secret-rm "$SECRET_NAME" "$SERVICE"
  docker secret rm "$SECRET_NAME"
}

secret-update() {
  declare cmd="update"
  [[ "$1" == "$cmd" ]] && shift 1

  SECRET_NAME="$1"
  SECRET="$2"

  # TODO: list and update all services using this secret
  docker service update --secret-rm "$SECRET_NAME" "$SERVICE"
  docker secret rm "$SECRET_NAME"

  if [[ -f "$SECRET" ]]; then
    docker secret create --template-driver golang "$SECRET_NAME" - <"$SECRET"
  else
    echo "$SECRET" | docker secret create --template-driver golang "$SECRET_NAME" -
  fi

  docker service update --secret-add source="$SECRET_NAME",target="$SECRET_NAME" "$SERVICE"
}

"$@"
