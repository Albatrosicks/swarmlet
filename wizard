#!/usr/bin/env bash

set -o allexport
source "src/config"
set +o allexport

tmpLog="/tmp/swarmlet-install.log"
instalLogLoc="/opt/swarmlet/install.log"

### PKG Vars ###
PKG_MANAGER="apt-get"
PKG_CACHE="/var/lib/apt/lists/"
UPDATE_PKG_CACHE="${PKG_MANAGER} update"
PKG_INSTALL="${PKG_MANAGER} --yes --no-install-recommends install"
PKG_COUNT="${PKG_MANAGER} -s -o Debug::NoLocking=true upgrade | grep -c ^Inst || true"
SWARMLET_DEPS=(acl curl git apt-transport-https apache2-utils moreutils wget)
SWARMLET_REPO="https://github.com/swarmlet/swarmlet.git"

# Find the rows and columns. Will default to 80x24 if it can not be detected.
screen_size=$(stty size 2>/dev/null || echo 24 80)
rows=$(echo ${screen_size} | awk '{print $1}')
columns=$(echo ${screen_size} | awk '{print $2}')
FPREFIX="=====>"
PREFIX="----->"
INDENT="      "

declare -A DEFAULT_OPTS=(
  [ROOT_DOMAIN]=$HOSTNAME   # (default $HOSTNAME) The domain to use for deployment of included services
  [CF_EMAIL]=root@$HOSTNAME # The email which you are using for cloudflare registration
  [INSTALLATION_MODE]=full  # (default full, options: full|minimal|bare) .. TODO
  [INSTALL_BRANCH]=master   # (default master) The default branch to install
  [CREATE_SWAP]=false       # (default false) Allocate 1GB of swap space
  [INSTALL_ZSH]=false       # (default false) Install 'Oh My Zsh'
  [NOOP]=                   # no-op for testing purposes
)

for KEY in "${!DEFAULT_OPTS[@]}"; do
  [[ ! -z "${DEFAULT_OPTS[$KEY]}" ]] && export "$KEY=${DEFAULT_OPTS[$KEY]}"
done
# Divide by two so the dialogs take up half of the screen, which looks nice.
r=$((rows / 2))
c=$((columns / 2))
# Unless the screen is tiny
r=$((r < 20 ? 20 : r))
c=$((c < 70 ? 70 : c))

do_select_branch() {
  USER_INSTALL_BRANCH=$(whiptail --inputbox "Select branch" 20 60 ${swarmletGitBranch} 3>&1 1>&2 2>&3)
  if [[ $? != 0 ]]; then abort-installation; fi
}
do_create_swap() {
  USER_SWAP=$(whiptail --yesno " Allocate 1GB of swap space" ${r} ${c} 3>&1 1>&2 2>&3)
}
do_install_zssh() {
  INSTALL_ZSH=$(whiptail --yesno " Install 'Oh My Zsh" ${r} ${c} 3>&1 1>&2 2>&3)
}
do_select_username() {
  USERNAME=$(whiptail --inputbox "please enter your username, we will use it to configure services" ${r} ${c} 3>&1 1>&2 2>&3)
  if [[ $? != 0 ]]; then abort-installation; fi
}
do_select_cf_email() {
  CF_EMAIL=$(whiptail --inputbox "please enter cloudflare email, we will use it to configure services" ${r} ${c} 3>&1 1>&2 2>&3)
  if [[ $? != 0 ]]; then abort-installation; fi
}
do_select_password() {
  PASSWORD=$(whiptail --passwordbox "please enter your secret password, we will use it to configure services" ${r} ${c} 3>&1 1>&2 2>&3)
  if [[ $? != 0 ]]; then abort-installation; fi
}
do_select_services() {
dialogbox=(whiptail
--separate-output
--ok-button "Install"
--title "Auto Setup Script"
--checklist "\nPlease select desired services:\n(Press 'Space' to Select/Deselect, 'Enter' to Install and 'Esc' to Cancel)" ${r} ${c})
	options=(1 "Swarmlet" off
		2 "Portainer" off
		3 "Grafana" off
		4 "Konsul" off)

selected=$("${dialogbox[@]}" "${options[@]}" 2>&1 >/dev/tty)
}
install_zssh() {
  echo "$PREFIX Installing 'Oh My Zsh'"
  apt-get install -y -qq zsh
  sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended >/dev/null

}

do_install_selected() {
for choices in $selected
do
	case $choices in
		1)
		echo -e "${c}Installing service 1"; $r
		echo -e "${c}Service 1 installed."; $r
		;;

		2)
		echo -e "${c}Installing service 2"; $r
		echo -e "${c}Service 2 installed."; $r
		;;

		3)
		echo -e "${c}Installing service 3"; $r
		echo -e "${c}Service 3 installed."; $r
		;;
	esac
done
}

update_package_cache
notify_package_updates_available
install_dependent_packages SWARMLET_DEPS[@]
uninstall-swarmlet
helloSwarmlet
do_select_username
do_change_hostname
 do_select_password
 do_select_cf_email
 do_select_branch
do_create_swap
do_install_zssh
install_docker
do_select_services
do_install_selected
# get_code

if [[ "$INSTALL_ZSH" == "true" ]]; then install_zssh; fi
install() {
  echo "$PREFIX Installing Swarmlet"
  echo "$PREFIX Installing dependencies"

  echo "$PREFIX Cloning Swarmlet from $SWARMLET_REPO"
  git clone -q ${SWARMLET_REPO} ${SWARMLET_INSTALL_ROOT}

  if [[ "$INSTALL_BRANCH" != "master" ]]; then
    echo "$PREFIX Checking out $INSTALL_BRANCH"
    pushd ${SWARMLET_INSTALL_ROOT} >/dev/null
    git checkout "$INSTALL_BRANCH"
    popd >/dev/null
    mkdir -p ${SWARMLET_INSTALL_ROOT}; cp -R $(dirname "$0")/* ${SWARMLET_INSTALL_ROOT}/
  fi

  echo "$PREFIX Linking executable"
  ln -s ${SWARMLET_INSTALL_ROOT}/swarmlet /usr/local/sbin/

  echo "$PREFIX Initializing Swarmlet"
  swarmlet init "$@"

  echo "$PREFIX Installation complete"
  [[ "$INSTALL_ZSH" == "true" ]] && chsh -s $(which zsh)

  echo "$FPREFIX Server initialized as manager node"
  docker node ls

  echo "$FPREFIX Swarmlet services stacks deployed"
  docker stack ls

  echo "$PREFIX Check the docs on how to configure a domain name for Swarmlet services"
  echo "$INDENT https://swarmlet.dev/docs/getting-started/introduction"
  echo "$PREFIX Please wait a minute or two for Traefik to initialize..."
  echo "$INDENT Follow the logs using:"
  echo "$INDENT $ docker service logs loadbalancer_traefik -f"
}
echo "$PREFIX Setup .ssh keys if needed."
echo "$PREFIX Checking existing installation"
if check_existing; then echo "$INDENT Removing old files"; uninstall-swarmlet; fi
install
